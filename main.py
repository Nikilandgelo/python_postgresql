import psycopg2

class Database():
    def __init__(self, cursor):
        self.cursor = cursor

    def delete_tables(self):
        self.cursor.execute("""
            DROP TABLE IF EXISTS phone, client;
                            """)
    
    def create_tables(self):
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS client (
                client_id SERIAL PRIMARY KEY,
                name VARCHAR(50) NOT NULL,
                last_name VARCHAR(50) NOT NULL,
                email VARCHAR(50) NOT NULL
            );
            CREATE TABLE IF NOT EXISTS phone (
                phone_numbers VARCHAR(25),
                id_client INTEGER REFERENCES client(client_id)
            );
                            """)
        
    def add_info_client(self, name_client: str, last_name_client: str, email: str):
        self.cursor.execute(f"""
            INSERT INTO client(name, last_name, email)
                VALUES
                ('{name_client}', '{last_name_client}', '{email}');
                             """)
        
    def add_phone_client(self, phone_numbers: str, id_client: int):
        self.cursor.execute(f"""
            INSERT INTO phone
                VALUES
                ('{phone_numbers}', '{id_client}');
                             """)
    
    def edit_one_info_client(self, id_client: int, need_change: str, changed_value: str):
        self.cursor.execute(f"""
            UPDATE client
                SET {need_change} = '{changed_value}'
                WHERE client_id = {id_client};
                             """)
        
    def edit_full_info_client(self, id_client: int, new_name: str, new_last_name: str, new_email: str):
        self.cursor.execute(f"""
            UPDATE client
                SET name = '{new_name}', last_name = '{new_last_name}', email = '{new_email}'
                WHERE client_id = {id_client};
                             """)
    
    def delete_phone_client(self, phone_numbers: str):
        self.cursor.execute(f"""
            DELETE FROM phone
                WHERE phone_numbers = '{phone_numbers}';
                             """)
    
    def delete_client(self, client_id: int):
        self.cursor.execute(f"""
            DELETE FROM client
                WHERE client_id = {client_id};
                             """)
        
    def find_client(self, name = None, last_name = None, email = None, phone_numbers = None):
        filter_string = ''
        is_first_filter = True

        for parameter, value in locals().items():
            if parameter in ('name', 'last_name', 'email', 'phone_numbers') and value != None:
                if is_first_filter == True:
                    filter_string += f"{parameter} = '{value}'"
                    is_first_filter = False
                else:
                    filter_string += f" AND {parameter} = '{value}'"

        self.cursor.execute(f"""
            SELECT *
            FROM client
            JOIN phone ON client.client_id = phone.id_client
            WHERE {filter_string};
                             """)
        print(self.cursor.fetchone())

password_file = open("password.txt", "r", encoding="UTF-8").readline()

connect = psycopg2.connect(dbname="clients", host="localhost", user="postgres", password = password_file)
cursor = connect.cursor()
clients_db = Database(cursor)

with cursor as doesnt_matter:
    while True:
        user_input = input("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n1 - –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã\n2 - –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n3 - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞\n" + 
                           "4 - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ\n5 - –£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —É –∫–ª–∏–µ–Ω—Ç–∞\n6 - –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n" + 
                           "7 - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞\n8 - –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã\n9 - –í—ã–π—Ç–∏\n")
        if user_input == '1':
            clients_db.create_tables()
        elif user_input == '2':
            client_input = input("–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ email –∫–ª–∏–µ–Ω—Ç–∞:\n").split(",")
            clients_db.add_info_client(client_input[0], client_input[1], client_input[2])
        elif user_input == '3':
            phone_input = input("–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏ id –∫–ª–∏–µ–Ω—Ç–∞:\n").split(",")
            clients_db.add_phone_client(phone_input[0], int(phone_input[1]))
        elif user_input == '4':
            yes_no_input = input("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ? Y/N\n").strip()
            if yes_no_input.upper() == 'Y':
                client_input = input("–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤–≤–µ–¥–∏—Ç–µ id, –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ email –∫–ª–∏–µ–Ω—Ç–∞:\n").split(",")
                clients_db.edit_full_info_client(int(client_input[0]), client_input[1], client_input[2], client_input[3])
            else:
                client_input = input("–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤–≤–µ–¥–∏—Ç–µ id, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å(name, last_name, email) –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n").split(",")
                clients_db.edit_one_info_client(int(client_input[0]), client_input[1], client_input[2])
        elif user_input == '5':
            phone_input = input("–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n").strip()
            clients_db.delete_phone_client(phone_input)
        elif user_input == '6':
            client_input = input("–£–∫–∞–∂–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n").strip()
            clients_db.delete_client(int(client_input))
        elif user_input == '7':
            print("–ó–¥–µ—Å—å —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ —è –≤–æ–æ–±—â–µ –Ω–µ —É–≤–µ—Ä–µ–Ω –Ω—É–∂–Ω–æ –ª–∏ –≤—Å–µ —ç—Ç–æ, " +
                               "–Ω–æ –ø–æ–∏—Å–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫:\n'clients_db.find_client(name='–ò–ª—å—è', phone_numbers='5558464')' - —ç—Ç–æ –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ\n" +
                               "'clients_db.find_client(last_name='–†–µ–¥—å–∫–∏–Ω')' - —ç—Ç–æ –µ—Å–ª–∏ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç")
            
            # clients_db.find_client(name='–ò–ª—å—è')                         # –ø—Ä–∏ –¥–≤—É—Ö –∏–ª—å—è—Ö –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π –æ—á–µ–≤–∏–¥–Ω–æ
            # clients_db.find_client(name='–ò–ª—å—è', last_name='–†–µ–¥—å–∫–∏–Ω')    # —Ç–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ
            ok = input("OK... (—á—Ç–æ —É–≥–æ–¥–Ω–æ –≤–≤–µ–¥–∏—Ç–µ)\n")
        elif user_input == '8':
            clients_db.delete_tables()
        elif user_input == '9':
            break

        print("\n–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω–æüëç")
        connect.commit()
        continue

connect.close()